using System;
using System.Linq;
using System.Text.Json;
using Saber.Core.Extensions.Strings;

namespace Saber.Core
{
    public static class PageInfo
    {

        public static string[] GetRelativePath(string path)
        {
            if(path == "") { return new string[] { }; }
            var paths = path.Split('/').Where(a => a != "").ToArray();

            //translate root path to relative path
            if (paths[0] == "root")
            {
                if (paths.Length == 1) { return new string[] { "" }; }
                var newpath = paths.Skip(1).ToArray();
                switch (newpath[0].ToLower())
                {
                    case "css": newpath[0] = "/CSS"; break;
                    default:
                        //prevent hackers from snooping
                        return new string[] { };
                }

                return newpath;
            }
            else if (paths[0].ToLower() == "wwwroot")
            {
                paths[0] = "/wwwroot";
            }
            else if( paths[0].ToLower() == "content" && paths.Length > 1)
            {
                switch (paths[1].ToLower())
                {
                    case "pages":
                        paths[0] = "/Content";
                        break;
                    case "partials":
                        paths[0] = "/Content";
                        break;
                    default:
                        paths[0] = "/Content/pages";
                        break;
                }
            }
            else
            {
                return new string[] { };
            }
            return paths;
        }

        public static string ConfigFilePath(string path)
        {
            var paths = GetRelativePath(path);
            var relpath = string.Join("/", paths);
            var file = paths[paths.Length - 1];
            var fileparts = file.Split(".", 2);
            return relpath.Replace(file, fileparts[0] + ".json");
        }

        public static Models.Page.Settings GetPageConfig(string path)
        {
            var filename = ConfigFilePath(path);
            var contents = Cache.LoadFile(filename);
            Models.Page.Settings config;
            if (contents != "")
            {
                config = JsonSerializer.Deserialize<Models.Page.Settings>(contents);
                if(config.header == null)
                {
                    config.header = new Models.Page.Template() { file = "header.html" };
                }
                if (config.footer == null)
                {
                    config.footer = new Models.Page.Template() { file = "footer.html" };
                }
                if (config != null) { return config; }
            }

            //try to get the template config
            var paths = GetRelativePath(path);
            var file = paths[paths.Length - 1];
            var template = Cache.LoadFile(string.Join('/', paths.Take(paths.Length - 1).ToArray()) + "/template.json");
            if(template != "")
            {
                config = JsonSerializer.Deserialize<Models.Page.Settings>(template);
                if (config != null) { return config; }
            }

            //all else fails, generate a new page settings object
            return new Models.Page.Settings()
            {
                title = new Models.Page.Title()
                {
                    prefix = "",
                    suffix = "",
                    body = file.Capitalize().Replace("-", " ").Replace("_", " ").Replace(".html", ""),
                    prefixId = 0,
                    suffixId = 0
                },
                description = "This page was generated by the Saber web development platform",
                datecreated = DateTime.Now,
                security = new Models.Page.Security()
                {
                    groups = new int[] { }
                }
            };
        }

        public static string NameFromFile(string filename)
        {
            if(filename.IndexOf('/') >= 0)
            {
                filename = filename.Split('/')[^1];
            }
            return filename.Replace(".html", "").Replace("-", " ").Replace("_", " ").Capitalize(); 
        }

        public static void SavePageConfig(string path, Models.Page.Settings config)
        {
            var filename = ConfigFilePath(path);
            Cache.SaveFile(filename, JsonSerializer.Serialize(config, new JsonSerializerOptions() { WriteIndented = true }));
        }
    }
}
